package us.evosys.hadoop.jobs

import org.apache.hadoop.conf.{Configured}
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat
import org.slf4j.{Logger, LoggerFactory}
import scala.collection.JavaConversions._
import org.apache.hadoop.util.{ToolRunner, Tool}
import org.apache.hadoop.fs.{Path}
import org.apache.hadoop.mapreduce.lib.input.{TextInputFormat, FileSplit, FileInputFormat}
import org.apache.hadoop.mapreduce._
import java.lang.IllegalStateException
import java.io.{DataOutput, DataInput}
import org.apache.hadoop.io.{WritableUtils, LongWritable, Writable, Text}
import util.matching.Regex
import org.apache.hadoop.mapred.lib.MultipleTextOutputFormat
import collection.Iterator


/**
 * Created by IntelliJ IDEA.
 * User: smishra
 * Date: 1/4/12
 * Time: 8:40 AM
 * To change this template use File | Settings | File Templates.
 */
trait GImplicits {
  implicit def fromNTerm(term: NTerm): NTermWritable = {
    val tw = new NTermWritable(term.value)
    tw.termList += term
    tw
  }
}

object GenomeIngestor extends Configured with Tool with HImplicits {
  val logger: Logger = LoggerFactory.getLogger(getClass)

  def runOld(args: Array[String]): Int = {
    val conf = getConf
    conf.setQuietMode(false)
    conf.set(GenomeIngestionMapper.WINDOW_SIZE, 3 + "")


    val job: Job = new Job(conf, "Genome Ingestor")

    job.setInputFormatClass(classOf[NonSplitableInputFormat])

    job.setJarByClass(this.getClass)

    job.setMapperClass(classOf[GenomeIngestionMapper])
    job.setMapOutputKeyClass(classOf[Text])
    job.setMapOutputValueClass(classOf[NTermWritable])

    job.setCombinerClass(classOf[GenomeIngestionCombiner])

    job.setReducerClass(classOf[GenomeIngestionReducer])

    job.setOutputKeyClass(classOf[Text])
    job.setOutputValueClass(classOf[NLink])
    //job.setNumReduceTasks(0)
    for (i <- 0 to args.length - 2) {
      logger.info("processing {}: {}", i, args(i))
      FileInputFormat.addInputPath(job, args.apply(i))
    }

    FileOutputFormat.setOutputPath(job, args.last)

    job.waitForCompletion(true) match {
      case true => 0
      case false => 1
    }
  }

  def run(args: Array[String]): Int = {
    val conf = getConf
    conf.setQuietMode(false)
    conf.set(GenomeIngestionMapper.WINDOW_SIZE, 3 + "")


    val job: Job = new Job(conf, "Genome Ingestor")

    job.setInputFormatClass(classOf[NonSplitableInputFormat])

    job.setJarByClass(this.getClass)

    job.setMapperClass(classOf[GenomeIngestionMapper2])
    job.setMapOutputKeyClass(classOf[Text])
    job.setMapOutputValueClass(classOf[Node])

    job.setCombinerClass(classOf[GenomeIngestionReducer2])

    job.setReducerClass(classOf[GenomeIngestionReducer2])

    job.setOutputKeyClass(classOf[Text])
    job.setOutputValueClass(classOf[Node])
    //job.setNumReduceTasks(0)
    for (i <- 0 to args.length - 2) {
      logger.info("processing {}: {}", i, args(i))
      FileInputFormat.addInputPath(job, args.apply(i))
    }

    FileOutputFormat.setOutputPath(job, args.last)

    job.waitForCompletion(true) match {
      case true => 0
      case false => 1
    }
  }

  def main(args: Array[String]) {
    System.exit(ToolRunner.run(this, args))
  }
}

//class MultiFileOutput extends MultipleTextOutputFormat[]

class NonSplitableInputFormat extends TextInputFormat {
  override protected def isSplitable(ctx: JobContext, fileName: Path): Boolean = false
}

object GenomeIngestionMapper {
  val WINDOW_SIZE = "window.size"
}

protected[jobs] class GenomeIngestionMapper extends Mapper[LongWritable, Text, Text, NTermWritable] with HImplicits with GImplicits {
  val logger: Logger = LoggerFactory.getLogger(getClass)

  var started: Boolean = false
  var stub: List[Char] = List()
  var winSize: Int = _
  var window: Window = _

  protected override def map(lnNumber: LongWritable, line: Text, context: Mapper[LongWritable, Text, Text, NTermWritable]#Context): Unit = {
    //System.err.println("file is " + context.getConfiguration.get("map.input.file"))
    val flName = context.getInputSplit match {
      case fs: FileSplit => fs.getPath.getName
      case _ => ""
    }

    //System.err.println(String.format("%s: processing line %s", flName, line))

    //Initialize
    if (!started) {
      winSize = context.getConfiguration.get(GenomeIngestionMapper.WINDOW_SIZE) match {
        case s: String => Integer.parseInt(s)
        case _ => throw new IllegalStateException("Window size not set")
      }
      logger.info("window size {}", winSize)

      window = Window(winSize)

      started = true
    }

    //Ignore the non genome related line
    if (line.startsWith(">")) {
      logger.info("skipping {}", line)
      //System.err.println("skipping " + line)
      return
    }

    val flOffset = context.getInputSplit.asInstanceOf[FileSplit].getStart
    logger.trace("file Offset {}", flOffset)

    val effLine: String = stub.isEmpty match {
      case false => stub.mkString + line.toUpperCase
      case _ => line.toUpperCase
    }

    //set the stub to used for next iteration
    stub = line.toCharArray.takeRight(winSize - 1).toList

    //System.err.println(String.format("effLine %s, stub: %s", effLine, stub))

    effLine foreach (c =>
      window.slide(c) match {
        case some: Some[NTerm] =>
          val term = some.get
          term.flName = flName
          //System.err.println("char: " + c + ", term: " + term)
          context.write(term.value, term)
        case None =>
      }
      )
  }
}


protected[jobs] class GenomeIngestionCombiner extends Reducer[Text, NTermWritable, Text, NTermWritable] with HImplicits {
  val logger: Logger = LoggerFactory.getLogger(getClass)

  protected override def reduce(key: Text, value: java.lang.Iterable[NTermWritable], context: Reducer[Text, NTermWritable, Text, NTermWritable]#Context): Unit = {
    val nTerm = new NTermWritable(key)
    /* Don't know why the iterators are mixed */
    val filtered = value.filter(t => t.name.equalsIgnoreCase(key))
    System.out.println(key + " size of valueItr: " + value.size + ", filtered size: " + filtered.size)

    filtered.foldLeft(nTerm)((res, curr) => res.add(curr))
    System.err.println(String.format("combined %s %s", key, nTerm))

    context.write(key, nTerm)
  }
}

protected[jobs] class GenomeIngestionReducer extends Reducer[Text, NTermWritable, Text, NLink] with HImplicits {
  val logger: Logger = LoggerFactory.getLogger(getClass)

  protected override def reduce(key: Text, value: java.lang.Iterable[NTermWritable], context: Reducer[Text, NTermWritable, Text, NLink]#Context): Unit = {
    System.err.println("reducing {}", key)

    val nlink = NLink(key)

    value.foldLeft(nlink)((res, curr) => res.add(curr))

    context.write(key, nlink)
  }
}

object NLink {
  def fromString(s: String): NLink = {
    val link = new NLink
    fromString(s, link)
    link
  }

  def fromString(s: String, link: NLink) {
    s split (":") match {
      case a: Array[String] if (a.size == 3) => {
        link.name = a(0)
        link.freq = a(1).toInt

        var locations: Map[String, List[Long]] = Map()

        a(2).tail match {
          case s: String => s.split(";") foreach {
            t => t.split("->") match {
              case e: Array[String] if (e.size == 2) =>
                val intArr: Array[Long] = e(1).split(",") match {
                  case strArr: Array[String] => for (s <- strArr) yield s.toLong
                  case _ => throw new IllegalArgumentException("unexpected " + e(1))
                }

                locations += (e(0) -> intArr.toList)
            }
          }
        }
        //System.out.println("locations: " + locations)
        link.locations = locations
      }
      case _ => throw new IllegalArgumentException("parse error: " + s)
    }
    link
  }
}

case class NLink(var name: String = "") extends Writable {
  def this() = this ("")

  private var freq: Long = 0

  def getFreq = freq

  var locations: Map[String, List[Long]] = Map()

  def getLocations: Map[String, List[Long]] = locations

  /* go through the termList and add all */
  def add(term: NTermWritable): NLink = {
    term.termList.foreach(term => {
      //System.err.println("adding " + term)
      term.value.equalsIgnoreCase(name) match {
        case true =>
          val l = term.offset :: locations.getOrElse(term.flName, List[Long]())

          locations = locations + (term.flName -> l)
          freq += term.freq
        case _ => //System.err.println(String.format("Link %s Skipping %s Expected %s Found %s", this, term, name, term.value))
      }
    })
    this
  }

  def write(out: DataOutput) {
    val str = toString
    //System.err.println("NLink writeOut: " + str)
    WritableUtils.writeString(out, str)
  }

  def readFields(in: DataInput) {
    val line = WritableUtils.readString(in)
    //System.err.println("NLink readIn: " + line)
    NLink.fromString(line, this)
  }

  override def toString = {
    var s: String = name.toUpperCase + ":" + freq + ":["

    locations.foreach(t => {
      s = s + t._1 + "->" + t._2.sorted.mkString(",") + ";"
    })

    s.take(s.size - 1)
  }
}

case class Window(size: Int) {
  var offset: Long = 0 - size
  var w: List[Char] = List()
  val re: Regex = "(?i)A|T|G|C".r
  val charSeq: Array[Char] = new Array(1)

  def slide(c: Char): Option[NTerm] = {
    charSeq(0) = c
    if (re.findFirstIn(charSeq).getOrElse("") != "") {
      offset += 1
      w ::= c
      if (w.size == size) {
        val value = w.reverse
        w = w.take(size - 1)

        return Some(new NTerm(value.mkString, offset))
      }
    }

    None
  }
}

class NTermWritable(var name: String) extends Writable {
  def this() = this ("")

  var termList: Set[NTerm] = Set()

  def add(term: NTermWritable): NTermWritable = {
    this.name.equalsIgnoreCase(term.name) match {
      case true => term.termList.foreach(t => t.value.equalsIgnoreCase(this.name) match {
        case true => termList += t
        case false => //System.err.println("Skipping: Expected term " + this.name + " found " + t.value)
      })
      case false => throw new IllegalArgumentException("Expected term " + this.name + " found " + term.name)
    }
    this
  }

  override def write(out: DataOutput) {
    System.err.println("Going to write " + name + " terms " + termList.size)
    WritableUtils.writeString(out, name)
    WritableUtils.writeVInt(out, termList.size)
    termList.foreach(t => t.write(out))
  }

  override def readFields(in: DataInput) {
    name = WritableUtils.readString(in)
    for (i <- 0 until WritableUtils.readVInt(in)) termList += NTerm.fromString(WritableUtils.readString(in))
    System.err.println("just read " + name + " terms " + termList.size)
  }

  override def toString: String = termList.mkString
}

object NTerm {
  def fromString(str: String): NTerm = populate(new NTerm(), str)

  def populate(nterm: NTerm, str: String): NTerm = {
    str split (":") match {
      case a: Array[String] if a.length == 4 =>
        nterm.value = a(0).trim; nterm.freq = a(1).trim.toInt; nterm.flName = a(2).trim; nterm.offset = a(3).trim.toInt
      case _ => throw new IllegalStateException("parse error:" + str)
    }
    nterm
  }
}

class NTerm(var value: String, var freq: Long, var flName: String, var offset: Long) extends Ordered[NTerm] {
  def this() = this (null, 1, "", 0)

  def this(value: String, flName: String, offset: Long) = this (value, 1, flName, offset)

  def this(value: String, offset: Long) = this (value, 1, "", offset)

  override def equals(other: Any) = other match {
    case that: NTerm => equality.equals(that.equality)
    case _ => false
  }

  def write(out: DataOutput) {
    val str = value + ":" + freq + ":" + flName + ":" + offset
    //System.err.println("NTerm writeOut: " + str)
    WritableUtils.writeString(out, str)
  }

  def readFields(in: DataInput) {
    val line = WritableUtils.readString(in)
    NTerm.populate(this, line)
  }

  override def hashCode() = equality.hashCode

  def compare(that: NTerm): Int = {
    if (this.value.equalsIgnoreCase(that.value)) {
      if (this.flName.equalsIgnoreCase(that.flName)) {
        this.offset.compareTo(that.offset)
      }
      else {
        this.flName.compare(that.flName)
      }
    }
    else
      this.value.compare(that.value)
  }

  override def toString = "name: " + value + ", freq: " + freq + ", flName: " + flName + ", offset: " + offset

  private def equality = value.toUpperCase + flName + offset
}

case class Window2(size: Int) {
  var offset: Int = 0 - size
  var w: List[Char] = List()
  val re: Regex = "(?i)A|T|G|C".r
  val charSeq: Array[Char] = new Array(1)

  def slide(c: Char): Option[Node] = {
    charSeq(0) = c
    if (re.findFirstIn(charSeq).getOrElse("") != "") {
      offset += 1
      w ::= c
      if (w.size == size) {
        val value = w.reverse
        w = w.take(size - 1)

        return Some(new Node(value.mkString,"").addOffset(offset))
      }
    }

    None
  }
}

//object Node {
//  def sortByOffset(node: Node): Node = node.toList.sortBy(_.offset).reduceLeft(_.add(_))
//
//  def sort(node: Node): Node = node.toList.sorted.reduceLeft(_.add(_))
//}
//
//class Node(var name: String, var chrName: String, var offset: Int) extends Writable with Iterable[Node] with Ordered[Node] {
//  def this() = this ("", "", 0)
//
//  def this(name: String, offset: Int) = this (name, "", offset)
//
//  var firstSib: Node = _
//
//  private var lastSib: Node = _
//  private var freq: Int = 0
//
//  var prevSibDist: Int = 0
//
//  def getFreq = freq match {
//    case 0 =>
//      var node = this
//      do {
//        freq += 1
//        node = node.firstSib
//      } while (node != null)
//      freq
//    case _ => freq
//  }
//
//  def add(sibling: Node): Node = {
//    if (!this.name.equalsIgnoreCase(sibling.name) || !this.chrName.equalsIgnoreCase(sibling.chrName)) {
//      throw new IllegalArgumentException(String.format("Expected %s %s Found %s %s", this.name, this.chrName, sibling.name, sibling.chrName))
//    }
//
//    if (this.offset == sibling.offset) {
//      System.err.println("skipping add " + sibling.mkString)
//      return this
//    }
//
//    freq = 0
//    lastSib match {
//      // it there are siblings
//      case n: Node =>
//        n.firstSib = sibling
//        n.lastSib = sibling
//        this.lastSib = sibling
//      case _ => //if there are no siblings
//        sibling.prevSibDist = sibling.offset - offset
//        firstSib = sibling;
//        lastSib = sibling
//    }
//
//    this
//  }
//
//  def merge(that: Node) = {
//    var o = that
//    while (o != null) {
//      this.add(o)
//      o = o.firstSib
//    }
//
//    this
//  }
//
//  def asList: List[Node] = {
//    var l: List[Node] = List()
//    l = this :: l
//
//    var node: Node = this.firstSib
//
//    while (node != null) {
//      val tmp = node.copy
//      l = tmp :: l
//      node = node.firstSib
//    }
//
//    l.reverse
//  }
//
//  def copy() = {
//    val node = new Node(this.name, this.chrName, this.offset)
//    node.prevSibDist = this.prevSibDist
//    node
//  }
//
//  def deepCopy = {
//    val node = new Node(this.name, this.chrName, this.offset)
//    var sib = this.firstSib
//    while (sib != null) {
//      node.add(new Node(sib.name, sib.chrName, sib.offset))
//      sib = sib.firstSib
//    }
//    node
//  }
//
//  override def mkString = name + ":" + chrName + ":" + offset + ":" + prevSibDist
//
//  override def toString = {
//    val sb: StringBuilder = new StringBuilder(this.getFreq + ":" + offset + ",")
//    var node: Node = this.firstSib
//    var l: List[Int] = List()
//    while (node != null) {
//      l = node.offset :: l
//      node = node.firstSib
//    }
//    sb.append(l.mkString(","))
//    sb.toString
//  }
//
//  def write(out: DataOutput) {
//    WritableUtils.writeString(out, this.name + ":" + this.chrName)
//    WritableUtils.writeVInt(out, getFreq)
//    WritableUtils.writeVInt(out, offset)
//
//    var node: Node = this.firstSib
//    while (node != null) {
//      WritableUtils.writeVInt(out, node.offset)
//      node = node.firstSib
//    }
//  }
//
//  def readFields(in: DataInput) {
//    val node = new Node()
//    val l = WritableUtils.readString(in)
//
//    l.split(":") match {
//      case p: Array[String] if p.size == 2 => node.name = p(0); node.chrName = p(1)
//      case _ => throw new IllegalArgumentException("Expected name:chName found " + l)
//    }
//
//    val count = WritableUtils.readVInt(in)
//    node.offset = WritableUtils.readVInt(in)
//
//    for (i <- 1 to count if i < count) {
//      val nextOffset = WritableUtils.readVInt(in)
//      node.add(new Node(node.name, node.chrName, nextOffset))
//    }
//
//    this.reset(node)
//  }
//
//  private def reset(node: Node) {
//    this.name = node.name
//    this.chrName = node.chrName
//    this.offset = node.offset
//    this.firstSib = null
//    this.lastSib = null
//
//    var sib = node.firstSib
//    while (sib != null) {
//      this.add(sib)
//      sib = sib.firstSib
//    }
//  }
//
//  def iterator: Iterator[Node] = NodeIterator(this)
//
//  case class NodeIterator(node: Node) extends Iterator[Node] {
//    var nn: Node = node
//
//    def hasNext: Boolean = nn != null
//
//    def next(): Node = {
//      val next = nn.copy
//      nn = nn.firstSib
//      next
//    }
//  }
//
//  override def equals(o: Any): Boolean = o match {
//    case that: Node => (this.name + this.chrName + this.offset).toLowerCase.equals((that.name + that.chrName + that.offset).toLowerCase)
//    case _ => false
//  }
//
//  def compare(that: Node): Int = {
//    this.name.toLowerCase.compare(that.name.toLowerCase) match {
//      case n: Int if n == 0 => this.chrName.toLowerCase.compare(that.chrName.toLowerCase) match {
//        case n: Int if n == 0 => this.offset.compare(that.offset)
//        case n: Int => n
//      }
//      case n: Int => n
//    }
//  }
//}

protected[jobs] class GenomeIngestionMapper2 extends Mapper[LongWritable, Text, Text, Node] with HImplicits with GImplicits {
  val logger: Logger = LoggerFactory.getLogger(getClass)

  var started: Boolean = false
  var stub: List[Char] = List()
  var winSize: Int = _
  var window: Window2 = _

  protected override def map(lnNumber: LongWritable, line: Text, context: Mapper[LongWritable, Text, Text, Node]#Context): Unit = {
    val flName = context.getInputSplit match {
      case fs: FileSplit => fs.getPath.getName
      case _ => ""
    }

    //Initialize
    if (!started) {
      winSize = context.getConfiguration.get(GenomeIngestionMapper.WINDOW_SIZE) match {
        case s: String => Integer.parseInt(s)
        case _ => throw new IllegalStateException("Window size not set")
      }
      logger.info("window size {}", winSize)

      window = Window2(winSize)

      started = true
    }

    //Ignore the non genome related line
    if (line.startsWith(">")) {
      logger.info("skipping {}", line)
      return
    }

    val flOffset = context.getInputSplit.asInstanceOf[FileSplit].getStart
    logger.trace("file Offset {}", flOffset)

    val effLine: String = stub.isEmpty match {
      case false => stub.mkString + line.toUpperCase
      case _ => line.toUpperCase
    }

    //set the stub to used for next iteration
    stub = line.toCharArray.takeRight(winSize - 1).toList

    effLine foreach (c =>
      window.slide(c) match {
        case some: Some[Node] =>
          val node = some.get
          node.chrName = flName
          context.write(node.name + ":" + flName, node)
        case None =>
      }
      )
  }
}

protected[jobs] class GenomeIngestionReducer2 extends Reducer[Text, Node, Text, Node] with HImplicits {
  protected override def reduce(key: Text, value: java.lang.Iterable[Node], context: Reducer[Text, Node, Text, Node]#Context): Unit = {
    val itr = value.iterator()
//    val res = itr.next.deepCopy
//
//    while (itr.hasNext) {
//      val next = itr.next().deepCopy
//      res.merge(next)
//    }
//    context.write(key, Node.sort(res))

    val res = itr.next.deepCopy()

    while (itr.hasNext) {
      val next = itr.next.deepCopy()
      res.merge(next)
    }
    context.write(key, res)
  }
}

class Node(var name: String, var chrName: String) extends Writable {
  var offsets: List[Int] = List()
  var sorted: Boolean = false

  def this() = this ("", "")

  def deepCopy() = {
    val clone = new Node(this.name, this.chrName)
    clone.offsets = this.offsets
    clone
  }

  def getFreq = offsets.size
  def addOffset(o: Int) = {
    offsets = o :: offsets
    sorted = false
    this
  }

  def sort = {
    if (!sorted) {
      offsets = offsets.sorted
      sorted = true
    }
    this
  }

  override def write(out: DataOutput) {
    WritableUtils.writeString(out, this.name + ":" + this.chrName)
    WritableUtils.writeVInt(out, offsets.size)
    offsets.foreach(WritableUtils.writeVInt(out, _))
    //WritableUtils.writeCompressedByteArray(out, offsets.mkString(",").getBytes)
  }

  override def readFields(in: DataInput) {
    val node = new Node
    val l = WritableUtils.readString(in)

    l.split(":") match {
      case p: Array[String] if p.size == 2 => node.name = p(0); node.chrName = p(1)
      case _ => throw new IllegalArgumentException("Expected name:chName found " + l)
    }

    val size = WritableUtils.readVInt(in)

    for (i <- 0 until size) node.addOffset(WritableUtils.readVInt(in))

//    var offset: List[Byte] = List()
//    for (b <- WritableUtils.readCompressedByteArray(in)) {
//      b ==',' match {
//        case true =>
//          node.addOffset(Integer.parseInt(new String(offset.reverse.toArray)))
//          offset = List()
//        case _ => offset = b :: offset
//      }
//    }
//    if (!offset.isEmpty) node.addOffset(Integer.parseInt(new String(offset.reverse.toArray)))

    this.name = node.name
    this.chrName = node.chrName
    this.offsets = node.offsets
    this.sort
  }

  override def toString = this.offsets.size + ":" + this.offsets.mkString(",")

  override def equals(o: Any): Boolean = o match {
    case that: Node => (this.name + this.chrName).toLowerCase.equals((that.name + that.chrName).toLowerCase) match {
      case true => sort.offsets.equals(that.sort.offsets)
      case _ => false
    }
    case _ => false
  }

  def merge(that: Node) {
    if (!this.name.equalsIgnoreCase(that.name) || !this.chrName.equalsIgnoreCase(that.chrName)) {
      throw new IllegalArgumentException(String.format("Expected %s %s Found %s %s", this.name, this.chrName, that.name, that.chrName))
    }
    this.sorted = false
    this.offsets = this.offsets ::: that.offsets
    //this.offsets = this.offsets.distinct
  }
}
